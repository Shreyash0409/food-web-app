{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const httpRequest = useCallback(async (requireConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requireConfig.url, {\n        method: requireConfig.method ? requireConfig.method : \"GET\",\n        body: requireConfig.body ? requireConfig.body : null,\n        headers: requireConfig.headers ? requireConfig.headers : {}\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong.\");\n      }\n\n      const responseData = await response.json();\n      applyData(responseData);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    httpRequest\n  };\n};\n\n_s(useHttp, \"eSh8S7eoKw3Q29EPOVg753WHfmw=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Shreyas/Desktop/Reactjs/foodcartapp/src/CustomHooks/use-http.js"],"names":["React","useCallback","useState","useHttp","isLoading","setIsLoading","error","setError","httpRequest","requireConfig","applyData","response","fetch","url","method","body","headers","ok","Error","responseData","json","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,WAAW,GAAGP,WAAW,CAAC,OAAOQ,aAAP,EAAsBC,SAAtB,KAAoC;AAClEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAACI,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADR;AAE9CC,QAAAA,IAAI,EAAEN,aAAa,CAACM,IAAd,GAAqBN,aAAa,CAACM,IAAnC,GAA0C,IAFF;AAG9CC,QAAAA,OAAO,EAAEP,aAAa,CAACO,OAAd,GAAwBP,aAAa,CAACO,OAAtC,GAAgD;AAHX,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,YAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA3B;AACAV,MAAAA,SAAS,CAACS,YAAD,CAAT;AACD,KAbD,CAaE,OAAOb,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACe,OAAP,CAAR;AACD;;AACDhB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GApB8B,EAoB5B,EApB4B,CAA/B;AAqBA,SAAO;AACLD,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CA9BD;;GAAML,O;;AA+BN,eAAeA,OAAf","sourcesContent":["import React, { useCallback, useState } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const httpRequest = useCallback(async (requireConfig, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requireConfig.url, {\r\n        method: requireConfig.method ? requireConfig.method : \"GET\",\r\n        body: requireConfig.body ? requireConfig.body : null,\r\n        headers: requireConfig.headers ? requireConfig.headers : {},\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong.\");\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      applyData(responseData);\r\n    } catch (error) {\r\n      setError(error.message); \r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n  return {\r\n    isLoading,\r\n    error,\r\n    httpRequest,\r\n  };\r\n};\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}