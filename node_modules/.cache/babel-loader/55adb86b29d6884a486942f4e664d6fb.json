{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyas\\\\Desktop\\\\Reactjs\\\\foodcartapp\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../../CustomHooks/use-input\";\nimport classes from \"./Checkout.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === \"\";\n\nconst isFiveChars = value => value.trim().length >= 5;\n\nconst Checkout = props => {\n  _s();\n\n  //! For validating name input\n  const validateNameInput = value => value.trim() !== '';\n\n  const {\n    value: enteredName,\n    inputChangeHandler: nameInputHandler,\n    inputBlurHandler: nameBlurHandler,\n    valueIsValid: nameIsValid,\n    hasError: nameHasError\n  } = useInput(validateNameInput); //! For validating street input\n\n  const validateStreetInput = value => value.trim().length > 5;\n\n  const {\n    value: enteredStreet,\n    inputChangeHandler: streetInputHandler,\n    inputBlurHandler: streetBlurHandler,\n    valueIsValid: streetIsValid,\n    hasError: streetHasError\n  } = useInput(validateStreetInput); //! For validating postalCode input\n\n  const validatePostalCodeInput = value => value.trim().length === 6;\n\n  const {\n    value: enteredPostalCode,\n    inputChangeHandler: postalCodeInputHandler,\n    inputBlurHandler: postalCodeBlurHandler,\n    valueIsValid: postalCodeIsValid,\n    hasError: postalCodeHasError\n  } = useInput(validatePostalCodeInput); //! For validating city input\n\n  const validateCityInput = value => value.trim() >= 3;\n\n  const {\n    value: enteredCity,\n    inputChangeHandler: cityInputHandler,\n    inputBlurHandler: cityBlurHandler,\n    valueIsValid: cityIsValid,\n    hasError: cityHasError\n  } = useInput(validateCityInput);\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = nameIsValid && streetIsValid && cityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? \"\" : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? \"\" : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${formInputsValidity.postalCode ? \"\" : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? \"\" : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid postal code!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"El+XwUbPtXAF4/XQY/QPtpYiB0U=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["C:/Users/Shreyas/Desktop/Reactjs/foodcartapp/src/components/Cart/Checkout.js"],"names":["useRef","useState","useInput","classes","isEmpty","value","trim","isFiveChars","length","Checkout","props","validateNameInput","enteredName","inputChangeHandler","nameInputHandler","inputBlurHandler","nameBlurHandler","valueIsValid","nameIsValid","hasError","nameHasError","validateStreetInput","enteredStreet","streetInputHandler","streetBlurHandler","streetIsValid","streetHasError","validatePostalCodeInput","enteredPostalCode","postalCodeInputHandler","postalCodeBlurHandler","postalCodeIsValid","postalCodeHasError","validateCityInput","enteredCity","cityInputHandler","cityBlurHandler","cityIsValid","cityHasError","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","current","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport useInput from \"../../CustomHooks/use-input\";\r\n\r\nimport classes from \"./Checkout.module.css\";\r\n\r\nconst isEmpty = (value) => value.trim() === \"\";\r\nconst isFiveChars = (value) => value.trim().length >= 5;\r\n\r\nconst Checkout = (props) => {\r\n\r\n  //! For validating name input\r\n  const validateNameInput = value => value.trim() !== ''\r\n  const {\r\n    value: enteredName,\r\n    inputChangeHandler: nameInputHandler,\r\n    inputBlurHandler: nameBlurHandler,\r\n    valueIsValid: nameIsValid,\r\n    hasError: nameHasError,\r\n  } = useInput(validateNameInput);\r\n\r\n  //! For validating street input\r\n  const validateStreetInput = value => value.trim().length > 5\r\n  const {\r\n    value: enteredStreet,\r\n    inputChangeHandler: streetInputHandler,\r\n    inputBlurHandler: streetBlurHandler,\r\n    valueIsValid: streetIsValid,\r\n    hasError: streetHasError,\r\n  } = useInput(validateStreetInput);\r\n\r\n  //! For validating postalCode input\r\n  const validatePostalCodeInput = value => value.trim().length === 6\r\n  const {\r\n    value: enteredPostalCode,\r\n    inputChangeHandler: postalCodeInputHandler,\r\n    inputBlurHandler: postalCodeBlurHandler,\r\n    valueIsValid: postalCodeIsValid,\r\n    hasError: postalCodeHasError,\r\n  } = useInput(validatePostalCodeInput);\r\n\r\n  //! For validating city input\r\n  const validateCityInput = value => value.trim() >= 3\r\n  const {\r\n    value: enteredCity,\r\n    inputChangeHandler: cityInputHandler,\r\n    inputBlurHandler: cityBlurHandler,\r\n    valueIsValid: cityIsValid,\r\n    hasError: cityHasError,\r\n  } = useInput(validateCityInput);\r\n\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    name: true,\r\n    street: true,\r\n    city: true,\r\n    postalCode: true,\r\n  });\r\n\r\n  const nameInputRef = useRef();\r\n  const streetInputRef = useRef();\r\n  const postalCodeInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredStreet = streetInputRef.current.value;\r\n    const enteredPostalCode = postalCodeInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\r\n\r\n    setFormInputsValidity({\r\n      name: enteredNameIsValid,\r\n      street: enteredStreetIsValid,\r\n      city: enteredCityIsValid,\r\n      postalCode: enteredPostalCodeIsValid,\r\n    });\r\n\r\n    const formIsValid =\r\n      nameIsValid &&\r\n      streetIsValid &&\r\n      cityIsValid &&\r\n      enteredPostalCodeIsValid;\r\n\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n\r\n    props.onConfirm({\r\n      name: enteredName,\r\n      street: enteredStreet,\r\n      city: enteredCity,\r\n      postalCode: enteredPostalCode,\r\n    });\r\n  };\r\n\r\n  const nameControlClasses = `${classes.control} ${\r\n    formInputsValidity.name ? \"\" : classes.invalid\r\n  }`;\r\n  const streetControlClasses = `${classes.control} ${\r\n    formInputsValidity.street ? \"\" : classes.invalid\r\n  }`;\r\n  const postalCodeControlClasses = `${classes.control} ${\r\n    formInputsValidity.postalCode ? \"\" : classes.invalid\r\n  }`;\r\n  const cityControlClasses = `${classes.control} ${\r\n    formInputsValidity.city ? \"\" : classes.invalid\r\n  }`;\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={nameControlClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\r\n        {!formInputsValidity.name && <p>Please enter a valid name!</p>}\r\n      </div>\r\n      <div className={streetControlClasses}>\r\n        <label htmlFor=\"street\">Street</label>\r\n        <input type=\"text\" id=\"street\" ref={streetInputRef} />\r\n        {!formInputsValidity.street && <p>Please enter a valid street!</p>}\r\n      </div>\r\n      <div className={postalCodeControlClasses}>\r\n        <label htmlFor=\"postal\">Postal Code</label>\r\n        <input type=\"text\" id=\"postal\" ref={postalCodeInputRef} />\r\n        {!formInputsValidity.postalCode && (\r\n          <p>Please enter a valid postal code!</p>\r\n        )}\r\n      </div>\r\n      <div className={cityControlClasses}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\r\n        {!formInputsValidity.city && <p>Please enter a valid city!</p>}\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}